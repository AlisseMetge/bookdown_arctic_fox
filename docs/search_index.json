[["index.html", "Arctic Fox Seasonal Molting Chapter 1 Introduction 1.1 Overview of project 1.2 Format of original data", " Arctic Fox Seasonal Molting Alisse Metge 2024-12-05 Chapter 1 Introduction The Arctic fox (Vulpes lagopus), like many species who live with seasonal snow, undergo a molt from denser fur in the winter to a shorter coat in the summer. Additionally, Arctic foxes occur in two color morphs, white and blue. During the molt, the white color morph changes from fully white in the winter to dorsally brownish in the summer, while the blue color morph varies from slightly lighter in winter to darker brown-gray in summer. Examples of these color morphs and seasonal pelage are shown in Fig. 1.1, taken from Laporte-Devylder et al, 2022. Figure 1.1: Arctic foxes of the white (top) and blue (bottom) color morphs, from winter (100%) to summer (0%) coats. 1.1 Overview of project I based my project on a study that looked at the timing and rate of seasonal molting of Arctic foxes (Laporte-Devylder et al, 2022). The dataset for this study consists of camera trap observations of Arctic foxes across 22 sites in Norway during their molting season, from 2011-2018. The dataset also includes average seasonal temperature each year (averaged across all sites) and site-specific measures of snow depth, snow continuity (number of days with snow on the ground) and a rodent density index for each site for each year sampled. (Not all sites were sampled each year.) The authors were interested in examining the timing of the molt in relation to environmental condtions. I downloaded two csv files from this Arctic fox dataset. Both tables contain too many categories of information and a lot of duplicated information, so my project was to clean up the data and reorganize them into a relational database. I also created a few visualizations of some of the data to begin to explore general trends in the data. 1.2 Format of original data The first original table (morph_phenology.csv) lists individual foxes and their color morph with the site, year, several measurements of environmental conditions at that site and year, and columns summarizing the start, median, and ending dates of the molt for that individual that year. This means that every individual fox observation also lists again all the measured environmental conditions for the corresponding site and year – that’s a lot of duplication! Similarly, the second original table (seasonal_moulting_phenology.csv) contains all those same data again, but with additional rows for each individual, listing all molt observations and dates for that individual, rather than a summary of the start-median-end of the molt. And again, all the site-year conditions are relisted with every entry (in addition to the molt data being duplicated). These highly duplicated data are just screaming to be reorganized into a relational database. For reference, here is a list of the columns contained in the two original csv files: "],["creating-a-relational-database.html", "Chapter 2 Creating a Relational Database 2.1 Structure of the relational database 2.2 Creating the empty database", " Chapter 2 Creating a Relational Database 2.1 Structure of the relational database I created a relational database, as outlined in the following ERD: A parent table of sites assigns a short (3 characters) site ID to each site name (which are long Norwegian names with special characters). Another parent table lists each individual fox and its color morph (white or blue), which does not change. An intermediate table contains the environmental conditions at each site each year, and the final table contains all the molt observations of individual foxes. For these last two tables, the site_year_id and molt_id primary keys are autogenerated integers. 2.2 Creating the empty database The relational database was constructed as follows. First, load the necessary R packages: # Load packages library(DBI) library(RSQLite) Then, establish a database connection to create the database (note that this will be stored in whatever directory you are working in): # Create database ArcticFox_db &lt;- dbConnect(RSQLite::SQLite(), &quot;ArcticFox_db.db&quot;) Next, we can construct each table in the database using the RSQLite package. Here is the code to create the sites table, with columns for site id and the original site name: # Create sites table dbExecute(ArcticFox_db, &quot;CREATE TABLE sites ( site_id char(3) NOT NULL PRIMARY KEY, site varchar(40) );&quot;) Code for the individuals table, which contains columns for individual ID and the morph (which does not change for each individual). Because there are only two possible entries for color morph, I constrained the characters using CHECK in the table.: # Create individuals table dbExecute(ArcticFox_db, &quot;CREATE TABLE individuals ( indiv_ID varchar(12) NOT NULL PRIMARY KEY, morph char(1) CHECK (morph IN (&#39;W&#39;, &#39;B&#39;)) );&quot;) The site_year_conditions table will contain columns for the site id, year, and the environmental conditions (rodent index, temperature, snow depth, snow continuity). Note that because there are only four possible values for the rodent index, I constrained the values using CHECK in the table. It will also auto generate an integer for the site-year ID, which is the primary key: # Create site-year conditions table dbExecute(ArcticFox_db, &quot;CREATE TABLE site_year_conditions ( site_year_id integer PRIMARY KEY AUTOINCREMENT, site_id char(3), year integer, rodent integer CHECK (rodent IN (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;)), temperature real, snow_depth real, snow_continuous integer, FOREIGN KEY (site_id) REFERENCES sites(site_id) );&quot;) And finally, the molt observation table, which contains columns for site-year ID, individual ID, the date, and the molt score. It will also generate an integer for the molt ID. Note that in the original data, date is recorded as the number of days since January 1, so I set it here to an integer. The molt score is the percentage of winter coat remaining (0, 5, 25, 50, 75, 95), so it will also be set as an integer. Here is the code: # Create molt observations table dbExecute(ArcticFox_db, &quot;CREATE TABLE molt_observations ( molt_id integer PRIMARY KEY AUTOINCREMENT, site_year_id integer, indiv_ID varchar(12), date integer, moult_score integer, FOREIGN KEY (site_year_id) REFERENCES site_year_conditions(site_year_id), FOREIGN KEY (indiv_ID) REFERENCES individuals(indiv_ID) );&quot;) "],["populating-the-database.html", "Chapter 3 Populating the database 3.1 Sites table 3.2 Individuals table 3.3 Site-year conditions table 3.4 Molt obeservations table 3.5 Check the data", " Chapter 3 Populating the database Because data were originally in two large, unruly tables with much duplication, I needed to clean these up and select the right columns to go in each table. Fist, I needed to load the data (note that I had already created the csv for sites, as described in the next section): # Load the data phenology &lt;- read.csv(&quot;../raw_data/morph_phenology.csv&quot;) moult &lt;- read.csv(&quot;../raw_data/seasonal_moulting_phenology.csv&quot;) sites &lt;- read.csv(&quot;../raw_data/sites.csv&quot;) 3.1 Sites table I created this table by hand in Excel, using the first three characters of each site name as its site ID. In the few cases where site names were partially repeated (such as north and south locations for Kjelsungbandet), I used the first two letters and the appropriate designation (e.g. KjS and KjN). (If I had not wanted these IDs to consist of part of the original names, I could have selected the sites column from one of the other tables, grouped by unique site names and then autogenerated an integer ID as the primary key). The code for populating the sites table in the database was: dbWriteTable(ArcticFox_db, &quot;sites&quot;, sites, append = TRUE) 3.2 Individuals table This can be generated by selecting only the individual ID and morph columns from the seasonal_moulting_phenology.csv, and grouping by unique IDs. The code for this was as follows: individuals &lt;- phenology %&gt;% select(indiv_ID, morph)%&gt;% distinct() To populate the table in the database, I used this code: dbWriteTable(ArcticFox_db, &quot;individuals&quot;, individuals, append = TRUE) 3.3 Site-year conditions table The phenology table was combined with the sites table using left_join, because I needed the site id. Then a new temporary column (site_id_year) was created with the mutate function to combine the site_id and year together. Next, I eliminated unwanted columns (morph, indiv_ID, start_95, median_50, end_0) using select and asked for distinct combinations of the remaining columns. Then, because I now had all the distinct site and year combinations, I could eliminate the site and temporary site_id_year columns with selectand then relocate the columns in the preferred order. This leaves us with a table that contains the site_id, year, rodent, temperature, snow-depth, and snow_continuous. Here is the code: site_year_conditions &lt;- phenology %&gt;% left_join(sites, by = &quot;site&quot;) %&gt;% mutate(site_id_year = paste(site_id, year, sep = &quot;_&quot;)) %&gt;% select(-c(morph, indiv_ID, start_95, median_50, end_0)) %&gt;% distinct() %&gt;% select(-site, -site_id_year) %&gt;% relocate(site_id, .before = year) I then populated the table in the database: dbWriteTable(ArcticFox_db, &quot;site_year_conditions&quot;, site_year_conditions, append = TRUE) 3.4 Molt obeservations table At this stage, I ran into the issue of having two different entities called “site_year_conditions,” one of which was the temporary table I created, without a primary key, while the desired one was the table I populated in the database, including the primary key. In order to ensure that the latter would be what was referenced in my subsequent script, I ran the following code to overwrite the original object: site_year_conditions &lt;- dbGetQuery(ArcticFox_db, &quot;SELECT * FROM site_year_conditions;&quot;) I was then ready to create the molt observations table. This required me to left_join to both the sites table and the site_year_conditions table to pick up the necessary columns. I then used select to choose the desired columns, as follows: molt_observations &lt;- moult %&gt;% left_join(sites, by = &quot;site&quot;) %&gt;% left_join(site_year_conditions) %&gt;% select(site_year_id, indiv_ID, date, moult_score) To populate the table in the database, we can use: dbWriteTable(ArcticFox_db, &quot;molt_observations&quot;, molt_observations, append = TRUE) 3.5 Check the data Now all four tables of the database are populated and ready to be used for data analysis. We can check to ensure that each of the tables was populated correctly with the following code: # Confirm that package is loaded and connect to the database library(DBI) ArcticFox_db &lt;- dbConnect(RSQLite::SQLite(), &quot;../ArcticFox_db.db&quot;) # Check sites table: dbGetQuery(ArcticFox_db, &quot;SELECT * FROM sites LIMIT 2;&quot;) ## site_id site ## 1 KjS Kjelsungbandet S ## 2 Mar Maribu-Brand # Check individuals table: dbGetQuery(ArcticFox_db, &quot;SELECT * FROM individuals LIMIT 3;&quot;) ## indiv_ID morph ## 1 AFK_01 W ## 2 AFK_02 W ## 3 AFMB_01 W # Check site-year conditions table: dbGetQuery(ArcticFox_db, &quot;SELECT * FROM site_year_conditions LIMIT 3;&quot;) ## site_year_id site_id year rodent temperature snow_depth snow_continuous ## 1 1 KjS 2011 4 7.03 12.89 132 ## 2 2 Mar 2011 4 7.03 6.69 129 ## 3 3 SlH 2011 4 7.03 29.00 145 # Check molt observations table: dbGetQuery(ArcticFox_db, &quot;SELECT * FROM molt_observations LIMIT 3;&quot;) ## molt_id site_year_id indiv_ID date moult_score ## 1 1 1 AFK_01 130 95 ## 2 2 1 AFK_01 136 75 ## 3 3 1 AFK_01 145 50 "],["visualizing-data-trends.html", "Chapter 4 Visualizing Data Trends 4.1 General molt timing 4.2 Conditions across sites and years 4.3 Molt timing and environmental conditions", " Chapter 4 Visualizing Data Trends Now that the data are cleaned up (duplicate information removed) and located in a relational database, we can begin to explore trends in the data with a few visualizations. First, we need to load the necessary tidyverse package and the viridis package for preferred colors. (We also need the DBI package, but that has already been loaded): library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(viridis) ## Loading required package: viridisLite Next, we need to connect to the Arctic fox database that we created: db_conn &lt;- dbConnect(RSQLite::SQLite(), &quot;../ArcticFox_db.db&quot;) And load the tables of interest: molt &lt;- dbGetQuery(db_conn, &quot;SELECT * FROM molt_observations;&quot;) site_cond &lt;- dbGetQuery(db_conn, &quot;SELECT * FROM site_year_conditions;&quot;) 4.1 General molt timing I first wanted to get an idea of the general timing of molt through the season, across all the sites and years. At this point, as I tried to write the code using ggplot, I discovered that for some reason, the dates in my original data had been stored as functions. So I had to change them to numeric before I proceeded with ggplot. Additionally, I used the fct_rev function to reverse the order in which molt scores were displayed to match the chronology (heaviest winter coat to summer coat over the course of the season). Here is the code: molt_plot1 &lt;- molt date_value &lt;- as.numeric(molt$date) ggplot(data = molt, mapping = aes(x = fct_rev(factor(moult_score)), y = date_value)) + geom_boxplot(fill = &quot;darkseagreen&quot;) + labs(x = &quot;Molt Score (% Winter Coat)&quot;, y = &quot;Date (Jan 1 = 1)&quot;) + theme_light() 4.2 Conditions across sites and years Next, I wanted to get a feel for how temperature and snow conditions varied across sites and years. I plotted snow depth at each site and varied the color for temperature and the size of the points for continuity of snow. I broke the chart into separate plots for each year so that I could observe how conditions across the whole region varied from year to year: ggplot(data = site_cond, mapping = aes(x = factor(site_id), y = snow_depth, color = temperature, size = snow_continuous)) + geom_point() + facet_wrap(~ year) + labs(x = &quot;Site&quot;, y = &quot;Snow Depth (mm)&quot;, color = &quot;Temperature (C)&quot;, size = &quot;Snow Continuity (days)&quot;) + scale_color_viridis_c() + theme_light() + theme(axis.text.x = element_blank()) 4.3 Molt timing and environmental conditions The previous plots enabled me to see that the years 2012 and 2015 were the coldest and had the most days of continuous snow. In contrast, 2011, 2014, and 2018 had warmer temperatures and fewer days of continuous snow. (2013, 2016, and 2017 were intermediate.) I wanted to see how the timing of the molt varied each year, so I needed to left_join to the site_cond table to pick up the year column. I chose just to look at the dates associated with mid-molt, or when the winter coat was at 50%, so I filtered for moult_score == 50 before piping it into ggplot. The code is as follows: molt_plot2 &lt;- molt %&gt;% left_join(site_cond) %&gt;% filter(moult_score == 50) %&gt;% ggplot(mapping = aes(x = factor(moult_score), y = date)) + geom_boxplot(fill = &quot;darkseagreen&quot;) + facet_wrap(~ year) + labs(x = &quot;&quot;, y = &quot;Date at Mid-Molt (Jan 1 = 1)&quot;) + theme_light() + theme(axis.text.x = element_blank()) + theme(axis.ticks.x = element_blank()) ## Joining with `by = join_by(site_year_id)` print(molt_plot2) It is interesting to note that the timing of mid-molt is indeed later in the colder, snowier years of 2012 and 2015 and appears to be earlier in the warmer years, especially 2011, which had both warmer temperatures and little snow. This could be the basis of further statistical testing to see if these differences were significant. This dataset provides an interesting glimpse into the timing of the molt of Arctic foxes in relation to environmental conditions across several years and sites in Norway. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
